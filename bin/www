#!/usr/bin/env node

/** * Module dependencies. */

const app = require('../app');
const debug = require('debug')('book-code:server');
const http = require('http');

/** * Normalize a port into a number, string, or false.*/

const normalizePort = (val) => {
  const port = parseInt(val, 10);
  // named pipe
  if (isNaN(port)) return val;
  // port number
  if (port >= 0) return port;
  return false;
}

/** * Event listener for HTTP server "error" event. */

const onError = (error) => {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/** * Event listener for HTTP server "listening" event. */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/** * Get port from environment and store in Express. */

const port = normalizePort(process.env.PORT || '3400');
app.set('port', port);

/** * Create HTTP server. */
const fs = require('fs');
// const key = fs.readFileSync('../../cert/CA/localhost/localhost.decrypted.key');
// const cert = fs.readFileSync('../../cert/CA/localhost/localhost.crt');
// const https = require('https');
// const server = https.createServer({ 
//     key, cert,
//     rejectUnauthorized: false
//   }, app);
// const server = https.createServer(app);
const server = http.createServer(app);

/** * Listen on provided port, on all network interfaces. */

server.listen(port, () => {console.log(`Listening on ${port}`);});
server.on('error', onError);
server.on('listening', onListening);
